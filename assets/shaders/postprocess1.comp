#version 450

// --- structures de donnÃ©es ---
#define TYPE_NONE							0	
#define TYPE_SEA							1		
#define TYPE_CONTINENT						2
#define TYPE_RIVER							3
#define TYPE_COAST							4
#define TYPE_RIDGE							5
#define TYPE_DRAINAGE						6



struct Edge
{
	/// indexes of the two vertices
	int v0, v1;
	/// index of the middle split vertex or -1
	int vm;
	/// LSB to MSB: first byte = split status (0: not split, 1: ghost split, 2: split), second byte = (0: noop, 1:ghost edge, 2:ghost marked (ie needs ghost split)), third byte = subdivision level	
	uint status;
	/// indexes of the two subedges if split or -1
	int child0, child1;	
	/// indexes of the two adjacent faces
	int f0, f1;
	/// Type : 0 none, 1 sea, 2 continent, 3 river
	uint type;
	
	int padding0, padding1, padding2;
};
struct Vertex
{
	/// first list of indexes of incident faces (or -1 if none)
	int faces_0[4];
	/// second list of indexes of incident faces (or -1 if none)
	int faces_1[4];
	/// PRNG seed
	uint seed;
	/// boolean = ghost or not ghost vertex
	uint status;
	//
	uint type;
	///
	uint branch_count; 	
	/// indexes of the vertices acting as river primitives
	int prim0;
	int prim1;
	int prim2;
	
	int padding1;		
	//int pad[4];
};
struct VertexAttrib
{
	/// xyz = world position (km), w = altitude (km)
	dvec4 position;
	/// x = nearest river altitude, y = distance to nearest river, z = tectonic altitude, w = water altitude
	dvec4 data;
	/// xyz = normalized flow direction, w = unused
	vec4 flow;
	/// x = nearest ravin altitude, y = distance to nearest ravin
	vec4 misc1;
	/// unused
	vec4 misc2;
	//
	vec4 padding;
};
struct WaterVertexAttrib
{
	/// xyz = 3D position, w = average water altitude (before wave displacement)
	dvec4 position;
	/// xyz = normal to water surface, w = unused
	vec4 normal;
	/// xyz = water flow direction normalized, w = unused
	vec4 flow;
	
	/// indexes of the vertices acting as river primitives
	int prim0;
	int prim1;
	int prim2;
	
	int padding1;		
	ivec4 padding2;
};

// --- shader storage buffers ---
layout(binding = 0, std430) readonly buffer edges_buffer 
{
  Edge edges[];
};
layout(binding = 2, std430) readonly buffer vertices_buffer
{
	Vertex vertices[];
};
layout(binding = 3, std430) coherent buffer vattribs_buffer 
{
  VertexAttrib vattribs[];
};


// --- uniforms ---
uniform uint lastEdgeIndex;
uniform double planetRadiusKm;
uniform double seaLevelKm;


// --- MAIN ---
layout(local_size_x = 128) in;
void main( )
{
	uint index = gl_GlobalInvocationID.x;
	if (index > lastEdgeIndex)
		return;

	const Edge E = edges[index];
	uint se0 = E.child0;
	uint se1 = E.child1;
	if ((edges[se0].status & 255u) != 0u)
		return;//check that the two subedges are not split (last LOD).
	if ((edges[se1].status & 255u) != 0u)
		return;	
	
	const Vertex V = vertices[E.vm];
	if (V.status != 1u)
		return;//only interested in ghost vertices
	
	VertexAttrib attrib = vattribs[E.vm];
	const VertexAttrib attrib0 = vattribs[E.v0];
	const VertexAttrib attrib1 = vattribs[E.v1];
	
	attrib.position.xyz = mix(attrib0.position.xyz, attrib1.position.xyz, 0.5LF);//relocate middle vertex (ghost) of the edge exactly in between the two end vertices of the edge.
	attrib.position.w = length(attrib.position.xyz) - planetRadiusKm;
	
	vattribs[E.vm] = attrib;
}

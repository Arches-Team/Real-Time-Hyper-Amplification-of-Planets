#version 450

// --- structures de données ---
#define TYPE_NONE							0	
#define TYPE_SEA							1		
#define TYPE_CONTINENT						2
#define TYPE_RIVER							3
#define TYPE_COAST							4
#define TYPE_RIDGE							5
#define TYPE_DRAINAGE						6

#define TEST_RIVER_BANK_MAX_DISTANCE		25.0LF


struct Edge
{
	/// indexes of the two vertices
	int v0, v1;
	/// index of the middle split vertex or -1
	int vm;
	/// LSB to MSB: first byte = split status (0: not split, 1: ghost split, 2: split), second byte = (0: noop, 1:ghost edge, 2:ghost marked (ie needs ghost split)), third byte = subdivision level	
	uint status;
	/// indexes of the two subedges if split or -1
	int child0, child1;	
	/// indexes of the two adjacent faces
	int f0, f1;
	/// Type : 0 none, 1 sea, 2 continent, 3 river
	uint type;
	
	int padding0, padding1, padding2;
};
struct Vertex
{
	/// first list of indexes of incident faces (or -1 if none)
	int faces_0[4];
	/// second list of indexes of incident faces (or -1 if none)
	int faces_1[4];
	/// PRNG seed
	uint seed;
	/// boolean = ghost or not ghost vertex
	uint status;
	//
	uint type;
	///
	uint branch_count; 	
	/// indexes of the vertices acting as river primitives
	int prim0;
	int prim1;
	int prim2;
	
	int padding1;		
	//int pad[4];
};
struct Face
{
	/// indexes of the three edges.
	int e0, e1, e2;
	/// normal to the triangle
	float normal_x, normal_y, normal_z;
	/// LSB to MSB : byte 0 = boolean (split 1 or not 0), byte 2 = lod
	uint status;
	//
	uint type;
};
struct VertexAttrib
{
	/// xyz = world position (km), w = altitude (km)
	dvec4 position;
	/// x = nearest river altitude, y = distance to nearest river, z = tectonic altitude, w = water altitude
	dvec4 data;
	/// xyz = normalized flow direction, w = unused
	vec4 flow;
	/// x = nearest ravin altitude, y = distance to nearest ravin
	vec4 misc1;
	/// unused
	vec4 misc2;
	//
	vec4 padding;
};
struct WaterVertexAttrib
{
	/// xyz = 3D position, w = average water altitude (before wave displacement)
	dvec4 position;
	/// xyz = normal to water surface, w = unused
	vec4 normal;
	/// xyz = water flow direction normalized, w = unused
	vec4 flow;
	
	/// indexes of the vertices acting as river primitives
	int prim0;
	int prim1;
	int prim2;
	
	int padding1;		
	//int pad[4];
};

// --- shader storage buffers ---
layout(binding = 0, std430) readonly buffer edges_buffer 
{
  Edge edges[];
};
layout(binding = 1, std430) readonly buffer faces_buffer 
{
  Face faces[];
};
layout(binding = 2, std430) readonly buffer vertices_buffer
{
	Vertex vertices[];
};
layout(binding = 3, std430) coherent buffer vattribs_buffer 
{
  VertexAttrib vattribs[];
};
layout(binding = 4, std430) writeonly buffer water_vattribs_buffer 
{
  WaterVertexAttrib water_vattribs[];
};

// --- uniforms ---
uniform uint lastVertexIndex;
uniform double planetRadiusKm;
uniform double seaLevelKm;
uniform double renderScale;


// --- MAIN ---
layout(local_size_x = 128) in;
void main( )
{
	uint index = gl_GlobalInvocationID.x;
	if (index > lastVertexIndex)
		return;

	const Vertex V = vertices[index];
	const VertexAttrib attrib = vattribs[index];
	
	// --- river profiles ---
	double ground_altitude = attrib.position.w;
	const bool ocean_case = ground_altitude < seaLevelKm;
	float debug_lerp_profile = 0.0;
	if (!ocean_case)
	{		
		const double max_altitude = attrib.data.z;
		const double nearest_river_altitude = attrib.data.x;
		const double distance2river = attrib.data.y;
		if (distance2river != 0.0LF && distance2river < TEST_RIVER_BANK_MAX_DISTANCE)
		{
			const float bank_angle = 8.0;//mix(6.0, 17.0, smoothstep(0.0, 3.0, tectoMax));//between 6° and 17°
			const double riverbank_slope = double(tan(bank_angle * 3.14159 / 180.0));
		
			double bank_altitude = nearest_river_altitude + distance2river * riverbank_slope;
			const double min_alt = max(seaLevelKm + 0.001LF, max_altitude);
			bank_altitude = min(bank_altitude, min_alt);
			//bank_altitude = mix(bank_altitude, min_alt, smoothstep(0.0, 1.0, bank_altitude - min_alt + 1.0));
		
			double lerp_distance = distance2river / TEST_RIVER_BANK_MAX_DISTANCE;
			debug_lerp_profile = float(lerp_distance);
			//float lerp_lod = smoothstep(0.0, 9.0, lodf);//clamp(lodf, 0.0, 7.0)/7.0;//
			//lerp_lod = 0.0;
			
			//bank_altitude = mix(bank_altitude, ground_altitude, lerp_lod * lerp_lod);
			ground_altitude = mix(bank_altitude, ground_altitude, double(lerp_distance));
			//ground_altitude = max(ground_altitude, bank_altitude);
			//ground_altitude = bank_altitude;
			
			//const float altitude_diff = 1.0LF;//1.0LF - smoothstep(0.0LF, 0.5LF, ground_altitude - bank_altitude);//adjust where too much altitude difference lies between regular relief and river bank relief
			
			//float alt1 = mix(bank_altitude, ground_altitude, lerp_distance);//lerp_distance*lerp_distance);
			//ground_altitude = mix(alt1, ground_altitude, lerp_lod * smoothstep(0.0, 0.7, lerp_distance));//*lerp_distance			
			
			
			vattribs[index].position.xyz = normalize(vattribs[index].position.xyz) * (planetRadiusKm + ground_altitude);
			vattribs[index].position.w = ground_altitude;
		}
	}
	vattribs[index].misc2.w = debug_lerp_profile;
		
	// --- vertex normal ---	
	vec3 normal = vec3(0.0);
	for (int i=0; i < 4; ++i)
		if (V.faces_0[i] >= 0)
		{
			const Face F = faces[V.faces_0[i]];
			//vec3 n = vec3(F.normal_x, F.normal_y, F.normal_z);
			//normal += n;
			
			const Edge e0 = edges[F.e0];
			const Edge e1 = edges[F.e1];
			const Edge e2 = edges[F.e2];
			bool flip0 = false;
			bool flip1 = false;
			bool flip2 = false;//determine winding of edges (as they can appear in any order)
			if (e0.v0 == e1.v0 || e0.v0 == e1.v1)
				flip0 = true;
			if (e1.v0 == e2.v0 || e1.v0 == e2.v1)
				flip1 = true;
			if (e2.v0 == e0.v0 || e2.v0 == e0.v1)
				flip2 = true;
			const int v0 = (flip0 ? e0.v1 : e0.v0);
			const int v1 = (flip1 ? e1.v1 : e1.v0);
			const int v2 = (flip2 ? e2.v1 : e2.v0);
			
			dvec3 p01 = (vattribs[v1].position - vattribs[v0].position).xyz;
			dvec3 p02 = (vattribs[v2].position - vattribs[v0].position).xyz;
			dvec3 n = normalize(cross(p01/renderScale, p02/renderScale));
			normal += vec3(n);
		}
	for (int i=0; i < 4; ++i)
		if (V.faces_1[i] >= 0)
		{
			const Face F = faces[V.faces_1[i]];
			//vec3 n = vec3(F.normal_x, F.normal_y, F.normal_z);
			//normal += n;
			
			const Edge e0 = edges[F.e0];
			const Edge e1 = edges[F.e1];
			const Edge e2 = edges[F.e2];
			bool flip0 = false;
			bool flip1 = false;
			bool flip2 = false;//determine winding of edges (as they can appear in any order)
			if (e0.v0 == e1.v0 || e0.v0 == e1.v1)
				flip0 = true;
			if (e1.v0 == e2.v0 || e1.v0 == e2.v1)
				flip1 = true;
			if (e2.v0 == e0.v0 || e2.v0 == e0.v1)
				flip2 = true;
			const int v0 = (flip0 ? e0.v1 : e0.v0);
			const int v1 = (flip1 ? e1.v1 : e1.v0);
			const int v2 = (flip2 ? e2.v1 : e2.v0);
			
			dvec3 p01 = (vattribs[v1].position - vattribs[v0].position).xyz;
			dvec3 p02 = (vattribs[v2].position - vattribs[v0].position).xyz;
			dvec3 n = normalize(cross(p01/renderScale, p02/renderScale));
			normal += vec3(n);
		}

	normal = normalize(normal);
	vattribs[index].misc1 = vec4(normal, 0.0);//store vertex normal in some unused attribute of VertexAttrib (unused for rendering that is)
	
	// --- add water vertex ---	
	bool water_ok = attrib.position.w - 0.004LF < attrib.data.w;//ensure terrain is below water
	water_ok = water_ok && ((attrib.data.w > seaLevelKm + 0.0015LF && attrib.data.y < 1.0LF) || (attrib.data.w < seaLevelKm + 0.0015LF));//ensure either river distance is small enough (< 1km), or that we're dealing with the sea.
	
	if (water_ok) // if water altitude is higher than terrain altitude at this vertex...
	{
		//const bool rivernotok = attrib.data.w > float(seaLevelKm) && attrib.flow.xyz == vec3(0.0);//=> TODO: assign flow direction to ocean too !
		//if (rivernotok)
		//	water_vattribs[index] = WaterVertexAttrib(dvec4(0.0LF), vec4(0.0), attrib.flow);//else marker : no water vertex here		
		//else {
			dvec4 p = attrib.position;
			p.w = attrib.data.w;
			p.xyz = normalize(p.xyz) * (planetRadiusKm + p.w);
						
			water_vattribs[index] = WaterVertexAttrib(p, vec4(0.0), attrib.flow);		
		//}
	}
	else {
		water_vattribs[index] = WaterVertexAttrib(dvec4(0.0LF), vec4(0.0), attrib.flow);//else marker : no water vertex here		
	}	
}
